/*
 * @lc app=leetcode id=4 lang=golang
 *
 * [4] Median of Two Sorted Arrays
 */

/*
 1. [1,3,5,7,9] [2,4,6,8,10] 5 6 1,3,5 6,8,10 7,9 2,4 8 3 1,2,3,5 6,8,9,10 7 4 1 2 3 4 5 6 7 8 9 10
 2. [1.2.3.4.5] [6.7.8.9.10] 3 8 1,2,3 8,9,10 4,5 6,7 | 4.5 6.5 1.2.3.4 7,8,9,10 5 6 | 1,2,3,4,5 6,7,8,9,10
 3. [1,2] [3,4,5,6,7,8,9,10] 1.5 6.5 1 7,8,9,10 2 3,4,5,6 | 2 4.5 1,2 5,6,7,8,9,10
 4. [1,3,5] [2,4,6,7,8,9,10]
 5. [1,10] [2,3,4,5,6,7,8,9]
 前：(m+n)/2的元素
 思路：取两者之间长度小的一个，在之中二分查找这样一个分割点i，该点左边的元素放入到小的一边，相应的长数组中(m+n+1)/2 -i左边的元素也要放到左边，这样就实现了吧述责分为长度相等的两部分，如果左边的都比右边的小，那么就是我们要找的部分。如果左边最大比右边最小大，说明大的这部分需要亏，大的来自左边，往左找；大的来自右边，往右找。
*/
func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {

}
